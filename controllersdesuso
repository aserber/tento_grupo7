//detail: (req, res) => {
		//	const products = JSON.parse(fs.readFileSync(productsFilePath, 'utf-8'));
		//	let id = req.params.id
		//	let product = products.find(product => product.id == id)
		//	res.render('admin/detail', {
		//		product,
		//		toThousand
		//	})
		//},
		//update: (req, res) => {
	//	const products = JSON.parse(fs.readFileSync(productsFilePath, 'utf-8'));
	//	let id = req.params.id;
	//	let productToEdit = products.find(product => product.id == id)
	//
	//	productToEdit = {
	//		id: productToEdit.id,
	//		...req.body,
	//		image: req.file ? req.file.filename : req.body.oldImagen,
	//	};
	//	let indice = products.findIndex(producto => producto.id == id);
	//	products[indice] = productToEdit
	//	fs.writeFileSync(productsFilePath, JSON.stringify(products, null, ' '));
	//	res.redirect('/');
	//},
	//	update: function (req,res) {
	//let productId = req.params.id;
	//  let productToEdit = db.Product.findByPk(id, { include: ["product", "productCategory"] })
	//db.Product.update(
	//    {
	//       id: productToEdit.id,
	//	...req.body,
	//	image: req.file ? req.file.filename : req.body.oldImagen,
	//	
	//    },
	//    {
	//        where: {id: productId}
	//    })
	//.then(()=> {
	//    return res.redirect('/')})            
	//.catch(error => res.send(error))
	//},
	
	//administrar: (req, res) => {
	//	const products = JSON.parse(fs.readFileSync(productsFilePath, 'utf-8'));
	//	let Chocolate = products.filter(function (products) {
	//		return products.category == 'Chocolate'
	//	})
	//	const Pasteleria = products.filter(function (products) {
	//		return products.category == 'Pasteleria'
	//	})
	////	res.render('admin/administrar', {
	//		Pasteleria,
	//		Chocolate,
	//		toThousand
	//	});
	//},
		//destroy: (req, res) => {
	//	const products = JSON.parse(fs.readFileSync(productsFilePath, 'utf-8'));
	//	let id = req.params.id;
	//	let finalProducts = products.filter(product => product.id != id);
	//	fs.writeFileSync(productsFilePath, JSON.stringify(finalProducts, null, ' '));
	//	res.redirect('/');
	//},
	//edit: (req, res) => {
	//	const products = JSON.parse(fs.readFileSync(productsFilePath, 'utf-8'));
	//	let id = req.params.id
	//	let productToEdit = products.find(product => product.id == id)
	//	res.render('admin/product-edit-form', { productToEdit })
	//},
	// Create -  Method to store
	//store: (req, res) => {
	//	const products = JSON.parse(fs.readFileSync(productsFilePath, 'utf-8'));
	//	let newProduct = {
	//		id: products[products.length - 1].id + 1,
	//		name: req.body.name,
	//		price: req.body.price,
	//		discount: req.body.discount,
	//		category: req.body.category,
	//		description: req.body.description,
	//		image: req.file ? req.file.filename : '',
	//	}
	//	console.log(newProduct)
	//	products.push(newProduct);
	//	fs.writeFileSync(productsFilePath, JSON.stringify(products, null, ' '));
	//	res.redirect('/');
	//
	//},//detail: (req, res) => {
	//	const products = JSON.parse(fs.readFileSync(productsFilePath, 'utf-8'));
	//	let id = req.params.id
	//	let product = products.find(product => product.id == id)
	//	if (product == undefined){
	//		res.redirect('/admin/error')
	//	} else{
	//		res.render('productos/detail', {
	//		product,
	//		toThousand
	//	})}
	//},


	USUARIOS
	
  //save: (req, res) => {
  //  const user = JSON.parse(fs.readFileSync(userFilePath, 'utf-8'));
  //  let newUser = {
  //    id: user[user.length - 1].id + 1,
  //    name: req.body.name,
  //    last_name: req.body.last_name,
  //    email: req.body.email,
  //    password: bcrypt.hashSync(req.body.password, 10),
  //    category: 1,
  //    image: req.file ? req.file.filename : '',
  //  } //  console.log(newUser)
 //   user.push(newUser);
 //   fs.writeFileSync(userFilePath, JSON.stringify(user, null, ' '));
 //   res.redirect('./login');
 // },

 //index: (req, res) => {
	//	res.render('web/index', {
	//		Pasteleria,
	//		Chocolate,
	//		toThousand
	//	});
	//},